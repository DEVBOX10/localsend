// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'package:localsend_app/rust/frb_generated.dart';

part 'webrtc.freezed.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `into`, `into`, `into`, `into`, `into`, `into`, `into`

Stream<WsServerMessage> connect(
        {required String uri, required PeerInfoWithoutId info, required FutureOr<void> Function(LsSignalingConnection) onConnection}) =>
    RustLib.instance.api.crateApiWebrtcConnect(uri: uri, info: info, onConnection: onConnection);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<LsSignalingConnection>>
abstract class LsSignalingConnection implements RustOpaqueInterface {
  Future<void> acceptOffer({required WsServerOfferMessage offer});

  Future<void> sendOffer({required String target});
}

enum PeerDeviceType {
  mobile,
  desktop,
  web,
  headless,
  server,
  ;
}

class PeerInfo {
  final String id;
  final String alias;
  final String version;
  final String? deviceModel;
  final PeerDeviceType? deviceType;
  final String fingerprint;

  const PeerInfo({
    required this.id,
    required this.alias,
    required this.version,
    this.deviceModel,
    this.deviceType,
    required this.fingerprint,
  });

  @override
  int get hashCode => id.hashCode ^ alias.hashCode ^ version.hashCode ^ deviceModel.hashCode ^ deviceType.hashCode ^ fingerprint.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is PeerInfo &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          alias == other.alias &&
          version == other.version &&
          deviceModel == other.deviceModel &&
          deviceType == other.deviceType &&
          fingerprint == other.fingerprint;
}

class PeerInfoWithoutId {
  final String alias;
  final String version;
  final String? deviceModel;
  final PeerDeviceType? deviceType;
  final String fingerprint;

  const PeerInfoWithoutId({
    required this.alias,
    required this.version,
    this.deviceModel,
    this.deviceType,
    required this.fingerprint,
  });

  @override
  int get hashCode => alias.hashCode ^ version.hashCode ^ deviceModel.hashCode ^ deviceType.hashCode ^ fingerprint.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is PeerInfoWithoutId &&
          runtimeType == other.runtimeType &&
          alias == other.alias &&
          version == other.version &&
          deviceModel == other.deviceModel &&
          deviceType == other.deviceType &&
          fingerprint == other.fingerprint;
}

class WsServerAnswerMessage {
  final PeerInfo peer;
  final String sessionId;
  final String sdp;

  const WsServerAnswerMessage({
    required this.peer,
    required this.sessionId,
    required this.sdp,
  });

  @override
  int get hashCode => peer.hashCode ^ sessionId.hashCode ^ sdp.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is WsServerAnswerMessage && runtimeType == other.runtimeType && peer == other.peer && sessionId == other.sessionId && sdp == other.sdp;
}

class WsServerErrorMessage {
  final int code;

  const WsServerErrorMessage({
    required this.code,
  });

  @override
  int get hashCode => code.hashCode;

  @override
  bool operator ==(Object other) => identical(this, other) || other is WsServerErrorMessage && runtimeType == other.runtimeType && code == other.code;
}

class WsServerHelloMessage {
  final PeerInfo client;
  final List<PeerInfo> members;

  const WsServerHelloMessage({
    required this.client,
    required this.members,
  });

  @override
  int get hashCode => client.hashCode ^ members.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is WsServerHelloMessage && runtimeType == other.runtimeType && client == other.client && members == other.members;
}

class WsServerJoinedMessage {
  final PeerInfo peer;

  const WsServerJoinedMessage({
    required this.peer,
  });

  @override
  int get hashCode => peer.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) || other is WsServerJoinedMessage && runtimeType == other.runtimeType && peer == other.peer;
}

class WsServerLeftMessage {
  final String peerId;

  const WsServerLeftMessage({
    required this.peerId,
  });

  @override
  int get hashCode => peerId.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) || other is WsServerLeftMessage && runtimeType == other.runtimeType && peerId == other.peerId;
}

@freezed
sealed class WsServerMessage with _$WsServerMessage {
  const WsServerMessage._();

  const factory WsServerMessage.hello(
    WsServerHelloMessage field0,
  ) = WsServerMessage_Hello;
  const factory WsServerMessage.joined(
    WsServerJoinedMessage field0,
  ) = WsServerMessage_Joined;
  const factory WsServerMessage.left(
    WsServerLeftMessage field0,
  ) = WsServerMessage_Left;
  const factory WsServerMessage.offer(
    WsServerOfferMessage field0,
  ) = WsServerMessage_Offer;
  const factory WsServerMessage.answer(
    WsServerAnswerMessage field0,
  ) = WsServerMessage_Answer;
  const factory WsServerMessage.error(
    WsServerErrorMessage field0,
  ) = WsServerMessage_Error;
}

class WsServerOfferMessage {
  final PeerInfo peer;
  final String sessionId;
  final String sdp;

  const WsServerOfferMessage({
    required this.peer,
    required this.sessionId,
    required this.sdp,
  });

  @override
  int get hashCode => peer.hashCode ^ sessionId.hashCode ^ sdp.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is WsServerOfferMessage && runtimeType == other.runtimeType && peer == other.peer && sessionId == other.sessionId && sdp == other.sdp;
}
