// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'dart:async';
import 'dart:convert';

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:localsend_app/rust/api/logging.dart';
import 'package:localsend_app/rust/api/webrtc.dart';
import 'package:localsend_app/rust/frb_generated.dart';
import 'package:localsend_app/rust/frb_generated.io.dart' if (dart.library.js_interop) 'frb_generated.web.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor => RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor => RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig => kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.7.0';

  @override
  int get rustContentHash => -1045480984;

  static const kDefaultExternalLibraryLoaderConfig = ExternalLibraryLoaderConfig(
    stem: 'rust_lib_localsend_app',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateApiWebrtcLsSignalingConnectionAcceptOffer({required LsSignalingConnection that, required WsServerOfferMessage offer});

  Future<void> crateApiWebrtcLsSignalingConnectionSendOffer({required LsSignalingConnection that, required String target});

  Stream<WsServerMessage> crateApiWebrtcConnect(
      {required String uri, required PeerInfoWithoutId info, required FutureOr<void> Function(LsSignalingConnection) onConnection});

  Future<void> crateApiLoggingEnableDebugLogging();

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_LsSignalingConnection;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_LsSignalingConnection;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_LsSignalingConnectionPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateApiWebrtcLsSignalingConnectionAcceptOffer({required LsSignalingConnection that, required WsServerOfferMessage offer}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLsSignalingConnection(that, serializer);
        sse_encode_box_autoadd_ws_server_offer_message(offer, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiWebrtcLsSignalingConnectionAcceptOfferConstMeta,
      argValues: [that, offer],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWebrtcLsSignalingConnectionAcceptOfferConstMeta => const TaskConstMeta(
        debugName: 'LsSignalingConnection_accept_offer',
        argNames: ['that', 'offer'],
      );

  @override
  Future<void> crateApiWebrtcLsSignalingConnectionSendOffer({required LsSignalingConnection that, required String target}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLsSignalingConnection(that, serializer);
        sse_encode_String(target, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiWebrtcLsSignalingConnectionSendOfferConstMeta,
      argValues: [that, target],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWebrtcLsSignalingConnectionSendOfferConstMeta => const TaskConstMeta(
        debugName: 'LsSignalingConnection_send_offer',
        argNames: ['that', 'target'],
      );

  @override
  Stream<WsServerMessage> crateApiWebrtcConnect(
      {required String uri, required PeerInfoWithoutId info, required FutureOr<void> Function(LsSignalingConnection) onConnection}) {
    final sink = RustStreamSink<WsServerMessage>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_ws_server_message_Sse(sink, serializer);
        sse_encode_String(uri, serializer);
        sse_encode_box_autoadd_peer_info_without_id(info, serializer);
        sse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLsSignalingConnection_Output_unit_AnyhowException(
            onConnection, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWebrtcConnectConstMeta,
      argValues: [sink, uri, info, onConnection],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiWebrtcConnectConstMeta => const TaskConstMeta(
        debugName: 'connect',
        argNames: ['sink', 'uri', 'info', 'onConnection'],
      );

  @override
  Future<void> crateApiLoggingEnableDebugLogging() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLoggingEnableDebugLoggingConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLoggingEnableDebugLoggingConstMeta => const TaskConstMeta(
        debugName: 'enable_debug_logging',
        argNames: [],
      );

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLsSignalingConnection_Output_unit_AnyhowException(
          FutureOr<void> Function(LsSignalingConnection) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLsSignalingConnection(rawArg0);

      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException('$e\n\n$s'));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(callId: callId, ptr: output.ptr, rustVecLen: output.rustVecLen, dataLen: output.dataLen);
    };
  }

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_LsSignalingConnection =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLsSignalingConnection;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_LsSignalingConnection =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLsSignalingConnection;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  LsSignalingConnection dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLsSignalingConnection(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LsSignalingConnectionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LsSignalingConnection dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLsSignalingConnection(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LsSignalingConnectionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FutureOr<void> Function(LsSignalingConnection)
      dco_decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLsSignalingConnection_Output_unit_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  Object dco_decode_DartOpaque(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return decodeDartOpaque(raw, generalizedFrbRustBinding);
  }

  @protected
  LsSignalingConnection dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLsSignalingConnection(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LsSignalingConnectionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<WsServerMessage> dco_decode_StreamSink_ws_server_message_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  PeerInfoWithoutId dco_decode_box_autoadd_peer_info_without_id(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_peer_info_without_id(raw);
  }

  @protected
  WsServerAnswerMessage dco_decode_box_autoadd_ws_server_answer_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ws_server_answer_message(raw);
  }

  @protected
  WsServerErrorMessage dco_decode_box_autoadd_ws_server_error_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ws_server_error_message(raw);
  }

  @protected
  WsServerHelloMessage dco_decode_box_autoadd_ws_server_hello_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ws_server_hello_message(raw);
  }

  @protected
  WsServerJoinedMessage dco_decode_box_autoadd_ws_server_joined_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ws_server_joined_message(raw);
  }

  @protected
  WsServerLeftMessage dco_decode_box_autoadd_ws_server_left_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ws_server_left_message(raw);
  }

  @protected
  WsServerOfferMessage dco_decode_box_autoadd_ws_server_offer_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ws_server_offer_message(raw);
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_isize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<PeerInfo> dco_decode_list_peer_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_peer_info).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  PeerDeviceType dco_decode_peer_device_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PeerDeviceType.values[raw as int];
  }

  @protected
  PeerInfo dco_decode_peer_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5) throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return PeerInfo(
      id: dco_decode_String(arr[0]),
      fingerprint: dco_decode_String(arr[1]),
      alias: dco_decode_String(arr[2]),
      deviceModel: dco_decode_String(arr[3]),
      deviceType: dco_decode_peer_device_type(arr[4]),
    );
  }

  @protected
  PeerInfoWithoutId dco_decode_peer_info_without_id(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return PeerInfoWithoutId(
      fingerprint: dco_decode_String(arr[0]),
      alias: dco_decode_String(arr[1]),
      deviceModel: dco_decode_String(arr[2]),
      deviceType: dco_decode_peer_device_type(arr[3]),
    );
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  WsServerAnswerMessage dco_decode_ws_server_answer_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return WsServerAnswerMessage(
      peer: dco_decode_peer_info(arr[0]),
      sessionId: dco_decode_String(arr[1]),
      sdp: dco_decode_String(arr[2]),
    );
  }

  @protected
  WsServerErrorMessage dco_decode_ws_server_error_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return WsServerErrorMessage(
      code: dco_decode_u_16(arr[0]),
    );
  }

  @protected
  WsServerHelloMessage dco_decode_ws_server_hello_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return WsServerHelloMessage(
      client: dco_decode_peer_info(arr[0]),
      members: dco_decode_list_peer_info(arr[1]),
    );
  }

  @protected
  WsServerJoinedMessage dco_decode_ws_server_joined_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return WsServerJoinedMessage(
      peer: dco_decode_peer_info(arr[0]),
    );
  }

  @protected
  WsServerLeftMessage dco_decode_ws_server_left_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return WsServerLeftMessage(
      peerId: dco_decode_String(arr[0]),
    );
  }

  @protected
  WsServerMessage dco_decode_ws_server_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return WsServerMessage_Hello(
          dco_decode_box_autoadd_ws_server_hello_message(raw[1]),
        );
      case 1:
        return WsServerMessage_Joined(
          dco_decode_box_autoadd_ws_server_joined_message(raw[1]),
        );
      case 2:
        return WsServerMessage_Left(
          dco_decode_box_autoadd_ws_server_left_message(raw[1]),
        );
      case 3:
        return WsServerMessage_Offer(
          dco_decode_box_autoadd_ws_server_offer_message(raw[1]),
        );
      case 4:
        return WsServerMessage_Answer(
          dco_decode_box_autoadd_ws_server_answer_message(raw[1]),
        );
      case 5:
        return WsServerMessage_Error(
          dco_decode_box_autoadd_ws_server_error_message(raw[1]),
        );
      default:
        throw Exception('unreachable');
    }
  }

  @protected
  WsServerOfferMessage dco_decode_ws_server_offer_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return WsServerOfferMessage(
      peer: dco_decode_peer_info(arr[0]),
      sessionId: dco_decode_String(arr[1]),
      sdp: dco_decode_String(arr[2]),
    );
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  LsSignalingConnection sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLsSignalingConnection(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LsSignalingConnectionImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LsSignalingConnection sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLsSignalingConnection(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LsSignalingConnectionImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Object sse_decode_DartOpaque(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_isize(deserializer);
    return decodeDartOpaque(inner, generalizedFrbRustBinding);
  }

  @protected
  LsSignalingConnection sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLsSignalingConnection(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LsSignalingConnectionImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustStreamSink<WsServerMessage> sse_decode_StreamSink_ws_server_message_Sse(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  PeerInfoWithoutId sse_decode_box_autoadd_peer_info_without_id(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_peer_info_without_id(deserializer));
  }

  @protected
  WsServerAnswerMessage sse_decode_box_autoadd_ws_server_answer_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ws_server_answer_message(deserializer));
  }

  @protected
  WsServerErrorMessage sse_decode_box_autoadd_ws_server_error_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ws_server_error_message(deserializer));
  }

  @protected
  WsServerHelloMessage sse_decode_box_autoadd_ws_server_hello_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ws_server_hello_message(deserializer));
  }

  @protected
  WsServerJoinedMessage sse_decode_box_autoadd_ws_server_joined_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ws_server_joined_message(deserializer));
  }

  @protected
  WsServerLeftMessage sse_decode_box_autoadd_ws_server_left_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ws_server_left_message(deserializer));
  }

  @protected
  WsServerOfferMessage sse_decode_box_autoadd_ws_server_offer_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ws_server_offer_message(deserializer));
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_isize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<PeerInfo> sse_decode_list_peer_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PeerInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_peer_info(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  PeerDeviceType sse_decode_peer_device_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return PeerDeviceType.values[inner];
  }

  @protected
  PeerInfo sse_decode_peer_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_fingerprint = sse_decode_String(deserializer);
    var var_alias = sse_decode_String(deserializer);
    var var_deviceModel = sse_decode_String(deserializer);
    var var_deviceType = sse_decode_peer_device_type(deserializer);
    return PeerInfo(id: var_id, fingerprint: var_fingerprint, alias: var_alias, deviceModel: var_deviceModel, deviceType: var_deviceType);
  }

  @protected
  PeerInfoWithoutId sse_decode_peer_info_without_id(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_fingerprint = sse_decode_String(deserializer);
    var var_alias = sse_decode_String(deserializer);
    var var_deviceModel = sse_decode_String(deserializer);
    var var_deviceType = sse_decode_peer_device_type(deserializer);
    return PeerInfoWithoutId(fingerprint: var_fingerprint, alias: var_alias, deviceModel: var_deviceModel, deviceType: var_deviceType);
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  WsServerAnswerMessage sse_decode_ws_server_answer_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_peer = sse_decode_peer_info(deserializer);
    var var_sessionId = sse_decode_String(deserializer);
    var var_sdp = sse_decode_String(deserializer);
    return WsServerAnswerMessage(peer: var_peer, sessionId: var_sessionId, sdp: var_sdp);
  }

  @protected
  WsServerErrorMessage sse_decode_ws_server_error_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_code = sse_decode_u_16(deserializer);
    return WsServerErrorMessage(code: var_code);
  }

  @protected
  WsServerHelloMessage sse_decode_ws_server_hello_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_client = sse_decode_peer_info(deserializer);
    var var_members = sse_decode_list_peer_info(deserializer);
    return WsServerHelloMessage(client: var_client, members: var_members);
  }

  @protected
  WsServerJoinedMessage sse_decode_ws_server_joined_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_peer = sse_decode_peer_info(deserializer);
    return WsServerJoinedMessage(peer: var_peer);
  }

  @protected
  WsServerLeftMessage sse_decode_ws_server_left_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_peerId = sse_decode_String(deserializer);
    return WsServerLeftMessage(peerId: var_peerId);
  }

  @protected
  WsServerMessage sse_decode_ws_server_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_ws_server_hello_message(deserializer);
        return WsServerMessage_Hello(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_ws_server_joined_message(deserializer);
        return WsServerMessage_Joined(var_field0);
      case 2:
        var var_field0 = sse_decode_box_autoadd_ws_server_left_message(deserializer);
        return WsServerMessage_Left(var_field0);
      case 3:
        var var_field0 = sse_decode_box_autoadd_ws_server_offer_message(deserializer);
        return WsServerMessage_Offer(var_field0);
      case 4:
        var var_field0 = sse_decode_box_autoadd_ws_server_answer_message(deserializer);
        return WsServerMessage_Answer(var_field0);
      case 5:
        var var_field0 = sse_decode_box_autoadd_ws_server_error_message(deserializer);
        return WsServerMessage_Error(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  WsServerOfferMessage sse_decode_ws_server_offer_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_peer = sse_decode_peer_info(deserializer);
    var var_sessionId = sse_decode_String(deserializer);
    var var_sdp = sse_decode_String(deserializer);
    return WsServerOfferMessage(peer: var_peer, sessionId: var_sessionId, sdp: var_sdp);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void sse_encode_AnyhowException(AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLsSignalingConnection(
      LsSignalingConnection self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as LsSignalingConnectionImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLsSignalingConnection(
      LsSignalingConnection self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as LsSignalingConnectionImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLsSignalingConnection_Output_unit_AnyhowException(
          FutureOr<void> Function(LsSignalingConnection) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLsSignalingConnection_Output_unit_AnyhowException(
            self),
        serializer);
  }

  @protected
  void sse_encode_DartOpaque(Object self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_isize(
        PlatformPointerUtil.ptrToPlatformInt64(encodeDartOpaque(self, portManager.dartHandlerPort, generalizedFrbRustBinding)), serializer);
  }

  @protected
  void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLsSignalingConnection(
      LsSignalingConnection self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as LsSignalingConnectionImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_StreamSink_ws_server_message_Sse(RustStreamSink<WsServerMessage> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_ws_server_message,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_box_autoadd_peer_info_without_id(PeerInfoWithoutId self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_peer_info_without_id(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ws_server_answer_message(WsServerAnswerMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ws_server_answer_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ws_server_error_message(WsServerErrorMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ws_server_error_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ws_server_hello_message(WsServerHelloMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ws_server_hello_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ws_server_joined_message(WsServerJoinedMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ws_server_joined_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ws_server_left_message(WsServerLeftMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ws_server_left_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ws_server_offer_message(WsServerOfferMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ws_server_offer_message(self, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_isize(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_peer_info(List<PeerInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_peer_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_peer_device_type(PeerDeviceType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_peer_info(PeerInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.fingerprint, serializer);
    sse_encode_String(self.alias, serializer);
    sse_encode_String(self.deviceModel, serializer);
    sse_encode_peer_device_type(self.deviceType, serializer);
  }

  @protected
  void sse_encode_peer_info_without_id(PeerInfoWithoutId self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.fingerprint, serializer);
    sse_encode_String(self.alias, serializer);
    sse_encode_String(self.deviceModel, serializer);
    sse_encode_peer_device_type(self.deviceType, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_ws_server_answer_message(WsServerAnswerMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_peer_info(self.peer, serializer);
    sse_encode_String(self.sessionId, serializer);
    sse_encode_String(self.sdp, serializer);
  }

  @protected
  void sse_encode_ws_server_error_message(WsServerErrorMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_16(self.code, serializer);
  }

  @protected
  void sse_encode_ws_server_hello_message(WsServerHelloMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_peer_info(self.client, serializer);
    sse_encode_list_peer_info(self.members, serializer);
  }

  @protected
  void sse_encode_ws_server_joined_message(WsServerJoinedMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_peer_info(self.peer, serializer);
  }

  @protected
  void sse_encode_ws_server_left_message(WsServerLeftMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.peerId, serializer);
  }

  @protected
  void sse_encode_ws_server_message(WsServerMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case WsServerMessage_Hello(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_ws_server_hello_message(field0, serializer);
      case WsServerMessage_Joined(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_ws_server_joined_message(field0, serializer);
      case WsServerMessage_Left(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_box_autoadd_ws_server_left_message(field0, serializer);
      case WsServerMessage_Offer(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_box_autoadd_ws_server_offer_message(field0, serializer);
      case WsServerMessage_Answer(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_box_autoadd_ws_server_answer_message(field0, serializer);
      case WsServerMessage_Error(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_box_autoadd_ws_server_error_message(field0, serializer);
    }
  }

  @protected
  void sse_encode_ws_server_offer_message(WsServerOfferMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_peer_info(self.peer, serializer);
    sse_encode_String(self.sessionId, serializer);
    sse_encode_String(self.sdp, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}

@sealed
class LsSignalingConnectionImpl extends RustOpaque implements LsSignalingConnection {
  // Not to be used by end users
  LsSignalingConnectionImpl.frbInternalDcoDecode(List<dynamic> wire) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  LsSignalingConnectionImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_LsSignalingConnection,
    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_LsSignalingConnection,
    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_LsSignalingConnectionPtr,
  );

  Future<void> acceptOffer({required WsServerOfferMessage offer}) =>
      RustLib.instance.api.crateApiWebrtcLsSignalingConnectionAcceptOffer(that: this, offer: offer);

  Future<void> sendOffer({required String target}) => RustLib.instance.api.crateApiWebrtcLsSignalingConnectionSendOffer(that: this, target: target);
}
